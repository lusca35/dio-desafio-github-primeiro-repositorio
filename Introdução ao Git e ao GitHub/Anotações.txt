Links para download do Git:
 - Windows: https://git-scm.com/download/win
 - macOS: https://git-scm.com/download/mac
 - Linux/Unix: https://git-scm.com/download/linux

GIT Estados
Modificado (modificado); Preparado (encenado / índice) Consolidado (comprometido);

Ajuda Geral: git help
Comando específico: git help add
                    git help commit
                    git help <qualquer_comando_git>

Configuração geral do GIT
As configurações do GIT são armazenadas no arquivo .gitconfig localizado dentro do diretório do usuário do Sistema Operacional.
Setar usuário: git config --global user.name "seu nome de usuario"
Setar email: git config --global user.email (seu email)
Editor Setar: git config --global core.editor vim
Setar ferramenta de merge: git config --global merge.tool vimdiff
Setar arquivos a serem ignorados: git config --global core.excludesfile ~/.gitignore
Listar configurações: git config --list

Ignorar Arquivos
Os nomes de arquivos / diretórios ou remédios de arquivos corrigidos no arquivo .gitignore não serão eliminados em um repositório. Existem dois arquivos .gitignore, são eles:
Geral: normalmente armazenado no usuário do Sistema Operacional. O arquivo que possui a lista de arquivos / diretórios a serem ignorados por todos os repositórios devem ser declarados conforme citado acima. O arquivo não precisa ter o nome de .gitignore .
Por repositório: Deve ser armazenado no diretório do repositório e deve conter uma lista de arquivos / diretórios que devem ser ignorados apenas para o repositório específico.

Repositório Local
Criar novo repositório: git init
Verificar estado dos arquivos / diretórios: git status

Adicionar arquivo / diretório (área preparada)
Adicionar um arquivo em específico: git add meu_arquivo.txt
Adicionar um diretório em específico: git add meu_diretorio
Adicionar todos os arquivos / diretórios: git add .	
Adicionar um arquivo que esta listado no .gitignore (geral ou do repositório): git add -f arquivo_no_gitignore.txt

Comitar arquivo / diretório
Comitar um arquivo: git commit meu_arquivo.txt
Comitar vários arquivos: git commit meu_arquivo.txt meu_outro_arquivo.txt
Comitar informando mensagem: git commit meuarquivo.txt -m "minha mensagem de commit"

Remover arquivo / diretório
Removedor de arquivo: git rm meu_arquivo.txt
Removedor de pasta: git rm -r diretorio

Visualizar histórico
Exibir histórico: git log
Exibir histórico com diff das duas últimas mudanças: git log -p -2
Exibir resumo do histórico (hash completa, autor, dados, comentário e qtde de mudanças (+/-)): git log --stat
Exibir informações resumidas em uma linha (hash completa e comentário): git log --pretty=oneline
Exibir histórico com formatação específica (hash abreviada, autor, dados e comentário): git log --pretty=format:"%h - %an, %ar : %s"
                                                                                                                 % h: Abreviação do hash;
                                                                                                                 % an: Nome do autor;
                                                                                                                 % ar: Dados;
                                                                                                                 % s: Comentário.
Exibir histório de um arquivo específico: git log -- <caminho_do_arquivo>
Exibir histórico de um arquivo específico que definir uma determinada palavra: git log --summary -S<palavra> [<caminho_do_arquivo>]
Exibir histórico modificação de um arquivo: git log --diff-filter=M -- <caminho_do_arquivo>
O pode ser substituido por: Escrito (A), Copiado (C), Apagado (D), Modificado (M), Renomeado (R), entre outros.
Exibir histório de um determinado autor: git log --author=usuario
Exibir revisão e autor da última modificação de uma bloco de linhas: git blame -L 12,22 meu_arquivo.txt 

Desfazendo operações
Desfazendo alteração local (diretório de trabalho). Deve ser utilizando enquanto o arquivo não foi adicionado na área encenada: git checkout -- meu_arquivo.txt
Desfazendo alteração local (área de estadiamento). Deve ser utilizando quando o arquivo já foi adicionado na área encenada: git reset HEAD meu_arquivo.txt

Se o resultado abaixo para aplicação, o comando reset não alterou o diretório de trabalho.
Unstaged changes after reset:
M	meu_arquivo.txt
A alteração do diretório pode ser realizada através do comando ao lado: git checkout meu_arquivo.txt

Repositório Remoto
Exibir os repositórios remotos: git remote
                                git remote -v
Vincular repositório local com um repositório remoto: git remote add origin git@github.com:leocomelli/curso-git.git
Exibir informações dos repositórios remotos: git remote show origin
Renomear um repositório remoto: git remote rename origin curso-git
Desvincular um repositório remoto: git remote rm curso-git

Enviar arquivos / diretórios para o repositório remoto
O primeiro push de um repositório deve conter o nome do repositório remoto e o branch: git push -u origin master
Os demais empurra não precisam dessa informação: git push

Atualizar repositório local de acordo com o repositório remoto
Atualizar os arquivos no branch atual: git pull
Buscar como mudanças, mas não aplica-las no ramo atual: git fetch
Clonar um repositório remoto já existente: git clone git@github.com:leocomelli/curso-git.git

Tag
Criando uma tag leve: git tag vs-1.1
Criando uma tag anotada: git tag -a vs-1.1 -m "Minha versão 1.1"
Criando uma tag assinada. Para criar uma tag assinada é necessária uma chave privada (GNU Privacy Guard - GPG): git tag -s vs-1.1 -m "Minha tag assinada 1.1"
Tag Criando a partir de um commit (hash): git tag -a vs-1.2 9fceb02
Criando tags no repositório remoto: git push origin vs-1.2
Criando todas as tags locais no repositório remoto: git push origin --tags

Galhos
O master é o branch principal do GIT. O HEAD é um ponteiro especial que indica qual é o branch atual. Por padrão, o HEAD aponta para o principal do ramo, ou master.
Criando um novo branch: git branch bug-123
Trocando para um branch existente: git checkout bug-123. Neste caso, o ponteiro principal HEAD esta localizado para o branch chamado bug-123.
Criar um novo ramo e trocar: git checkout -b bug-456
Voltar para o branch principal (master): git checkout master
Resolver mesclar entre os ramos: git merge bug-123
Para realizar ou mesclar , é necessário estar nenhum ramo que deve receber como mudanças. O merge automático pode ou manual. O automático mesclado será feito em arquivos textos que não sofreram alterações nas linhas, já o mesclar será feito manual em arquivos textos que sofreram alterações nas linhas.

A mensagem indicada um manual de fusão será: Automerging meu_arquivo.txt
                                             CONFLICT (content): Merge conflict in meu_arquivo.txt
                                             Automatic merge failed; fix conflicts and then commit the result.
Apagando um galho: git branch -d bug-123

Ramos Listar
Ramos Listar: git branch
Listar sucursais com informações dos últimos commits: git branch -v
Listar branches que já foram fundidos (fundidos) com o master: git branch --merged
Listar branches que não foram fundidos (fundidos) com o master: git branch --no-merged

Criando branches no repositório remoto
Criando um branch remoto com o mesmo nome: git push origin bug-123
Criando um branch remoto com nome diferente: git push origin bug-123:new-branch
Baixar um branch remoto para edição: git checkout -b bug-123 origin/bug-123
Filial da Apagar remotamente: git push origin:bug-123

Rebasing
Fazendo o rebase entre um o branch bug-123 e o master: git checkout experiment

git rebase master

Criar um estoque: git stash
Listar stashes: git stash list
Voltar para o último estoque: git stash apply
Voltar para um stash específico: git stash apply stash@{2} Onde 2 é o índice do stash desejado.
Criar uma filial a partir de um estoque: git stash branch meu_branch

Reescrevendo o histórico
Alterando mensagens de commit: git commit --amend -m "Minha nova mensagem"
Alterar últimos compromissos. Alterando os três últimos commits: git rebase -i HEAD~3
O editor de texto será aberto com as declarações os três últimos commits: pick f7f3f6d changed my name a bit
                                                                          pick 310154e updated README formatting and added blame
                                                                          pick a5f4a0d added catfile
Altere para editar os commits que deseja realizar mudanças: edit f7f3f6d changed my name a bit
                                                            pick 310154e updated README formatting and added blame
                                                            pick a5f4a0d added catfile
Feche o editor de texto.
Digite o comando para alterar a mensagem do commit que foi marcado como editar: git commit –amend -m “Nova mensagem”
Aplique a alteração: git rebase --continue
Atenção: É possível alterar uma ordem dos commits ou removendo um commit apenas mudando como linhas ou removendo.
Juntando vários commits
Seguir os mesmos passos acima, porém marcar os commtis que devem ser juntados com * squash
Removedor de todo histórico de um arquivo: git filter-branch --tree-filter 'rm -f passwords.txt' HEAD

Bisect
O bisect (pesquisa binária) é útil para encontrar um commit que esta gerando um bug ou uma inconsistência entre uma sequência de commits.
Iniciar pequinsa binária: git bisect start
Marcar o commit atual como ruim: git bisect bad
Marcar o commit de uma tag que esta sem bug / inconsistência: git bisect good vs-1.1
Marcar o commit como bom. O GIT irá navegar entre os commits para ajudar a identificar o commit que esta com o problema. Se o comprometer atual não estiver quebrado, então é necessário marca-lo como bom: git bisect good
Marcar o commit como ruim. Se o commit estiver com o problema, então ele deve ser marcado como ruim: git bisect bad
Finalizar a pesquisa binária. Depois de encontrar o commit com problema, para retornar para o HEAD utilizar: git bisect reset

